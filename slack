///"StAuth10065: I Minh Dang, 746305 certify that this material is my original work.
// No other person's work has been used without due acknowledgement. 
//I have not made my work available to anyone else."

const SlackBot = require('slackbots');
const yelpAPI = require('yelp-api');
const sqlite3 = require('sqlite3').verbose();

//create yelp api and slack bot
let yelpkey = 'pnhmsYKctRQcVCDQrdJNVhRw0fJ1DVA5As2bOXI6-FH5qoAYnwm4IiDnnvKTWN9eZvoyFdcmyFfnqppfB_PXUaObKYvjdOG5gxmNK-8NQWCajBa30QtEnuDoC4ueXXYx';
let yelp = new yelpAPI(yelpkey);

//create slack bot
const bot = new SlackBot({
    token: 'xoxb-791981539143-777351271090-OPWcYQszofHntZ0I1icNDJX2',
    name: 'yelphelp'
});

let defaultparams = {
    icon_emoji: 'robot_face'
}

let errorParams = {
    icon_emoji: 'exclamation'
}

//Create database
let db = new sqlite3.Database('./api.db', (err) => {
    if (err) {
      console.error(err.message);
    }
});

db.run('DROP TABLE IF EXISTS messages', (err, result)=>{
    if(err){
        console.log(err.message)
    }else{
        db.run('CREATE TABLE messages(status TEXT, message TEXT, timestamp TEXT)')
    }
})


//Send a welcome message when bot is called
bot.on('start', () => {
    bot.postMessageToChannel('general', 'Update status to Microbrewery Process', defaultparams);
});



//error handler
bot.on('error', err => console.log(err));

//message event handler
bot.on('message', data => {
    if(data.type !== 'message'){
        return;
    }
    handleMessage(data.text);
})

//This function handle message in the group chat, dectect command and call appropriate query function
function handleMessage(message){

    //Update Status
    if(message.includes('StatusUpdate ')){
        //slice the command string to get the request number of restaurants and address
        let commandDetails = message.substring(13);
        let [status, ...text] = commandDetails.split(" ")
        text = text.join(" ");
        updateStatus(status, text);
    }

}


//This function insert a message into the database
function updateStatus(status, message){
    let stm = 'INSERT INTO messages (status, message, timestamp) VALUES (?,?,CURRENT_TIMESTAMP)'
    let sqlParams = [status, message]
    db.run(stm, sqlParams, (err, result) => {
        if(err){
            console.log({"error": err.message});
            bot.postMessageToChannel('general', `Error inserting message in database: ${err.message}`, errorParams);
            return;
        }
        else{
            console.log(result);
            bot.postMessageToChannel('general', `Status inserted successfully`, defaultparams);
        }
    })
}





